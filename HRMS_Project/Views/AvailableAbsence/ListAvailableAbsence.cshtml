@model PaginatedList<HRMS_Project.Models.AvailableAbsence>
@*IEnumerable<AvailableAbsence>*@
@inject UserManager<Employee> UserManager

@{
    ViewData["Title"] = "Lista urlopów";
}

<h1>Dostępne urlopy pracowników</h1>
<hr />

<div>
    <a class="btn btn-primary" style="width:auto" asp-controller="AvailableAbsence" asp-action="CreateAvailableAbsence">
        Dodaj nowy urlop
    </a>
    @*<a class="btn btn-primary" style="width:auto" asp-controller="AbsenceType" asp-action="CreateAbsenceType">
            Dodaj nowy rodzaj urlopu
        </a>*@
</div>

<br />

<form method="get" asp-action="ListAvailableAbsence">
    <p>
        <input type="search" placeholder="Wyszukaj po nazwisku pracownika..." value="" name="searchString" style="width:300px;border-radius:4px" />
        <input class="btn-primary mb-4" type="submit" value="Wyszukaj" style="border-radius:4px" />
        <a asp-action="ListAvailableAbsence"> | Usuń filtr</a>
    </p>
</form>

@if (Model.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Pracownik
                </th>
                <th>
                    Rodzaj urlopu
                </th>
                <th>
                    Dostępne dni
                </th>
                <th>
                    Wykorzystane dni
                </th>
                <th>
                    Numer karty pracownika
                </th>
                <th>
                    Akcja
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @item.IdEmployeeNavigation.LastName @item.IdEmployeeNavigation.FirstName
                        @*@UserManager.FindByIdAsync(item.IdEmployee).Result.LastName @UserManager.FindByIdAsync(item.IdEmployee).Result.FirstName*@
                    </td>
                    <td>
                        @item.IdAbsenceTypeNavigation.AbsenceTypeName
                        @*@Model.AbsenceType.Find(a => a.IdAbsenceType == item.IdAbsenceType).AbsenceTypeName*@
                    </td>
                    <td>
                        @item.AvailableDays
                    </td>
                    <td>
                        @item.UsedAbsence
                    </td>
                    <td>
                        @item.IdEmployeeNavigation.IdCardNumber
                        @*@UserManager.FindByIdAsync(item.IdEmployee).Result.IdCardNumber*@
                    </td>
                    <td>
                        <form method="post" asp-action="ResetAvailableAbsence" asp-route-id="@item.IdAvailableAbsence">
                            <a class="btn btn-primary btn-sm" style="width:auto" asp-controller="AvailableAbsence" asp-action="EditAvailableAbsence" asp-route-id="@item.IdAvailableAbsence">
                                Edytuj
                            </a>
                            <button type="submit" class="btn btn-danger btn-sm">
                                Zresetuj
                            </button>
                        </form>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";


    <a asp-action="ListAvailableAbsence"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @prevDisabled">
        Poprzednia strona
    </a>
    <a asp-action="ListAvailableAbsence"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-default @nextDisabled">
        Następna strona
    </a>
}
else
{
    <h3>Brak dostępnych urlopów</h3>
}