@model PaginatedList<HRMS_Project.Models.Request>
@*IEnumerable<Request>*@
@inject UserManager<Employee> UserManager

@{
    ViewData["Title"] = "Wnioski";
    var user = await UserManager.GetUserAsync(User);
}

<h1>Twoje wnioski</h1>

<hr />

<p>
    <a class="btn btn-primary" style="width:auto" asp-controller="Request" asp-action="CreateRequest" asp-route-id="@user.Id">
        Złóż wniosek urlopowy
    </a>
    <a class="btn btn-primary" style="width:auto" asp-controller="Request" asp-action="CreateOvertimeRequest">
        Złóż wniosek o nadgodziny
    </a>
    <a class="btn btn-primary" style="width:auto" asp-controller="Request" asp-action="CreateTakeOvertimeRequest">
        Złóż wniosek o odbiór nadgodzin
    </a>
</p>

@if (Model.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Numer
                </th>
                <th>
                    Rodzaj wniosku
                </th>
                <th>
                    Data
                </th>
                <th>
                    Od
                </th>
                <th>
                    Do
                </th>
                <th>
                    Status
                </th>
                <th>
                    Akcja
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @item.RequestNumber
                    </td>
                    <td>
                        @item.IdRequestTypeNavigation.RequestTypeName
                        @*@Model.RequestType.Find(r => r.IdRequestType == item.IdRequestType).RequestTypeName*@
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.RequestDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.StartDate)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.EndDate)
                    </td>
                    <td>
                        @item.IdRequestStatusNavigation.StatusName
                    </td>
                    <td>
                        <a class="btn btn-info btn-sm" asp-controller="Request" asp-action="RequestDetails" asp-route-id="@item.IdRequest">
                            Szczegóły
                        </a>
                        @if (item.IdRequestStatus == 1 || item.IdRequestStatus == 2)
                        {
                            <a class="btn btn-danger btn-sm" asp-controller="Request" asp-action="CancelRequest" asp-route-id="@item.IdRequest">
                                Wycofaj
                            </a>
                        }
                        else
                        {
                            <button class="btn btn-danger btn-sm" disabled>
                                Wycofaj
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";


    <a asp-action="ListRequest"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-outline-secondary @prevDisabled">
        Poprzednia strona
    </a>
    <label>Strona</label> @Model.PageIndex <label> / </label> @Model.TotalPages
    <a asp-action="ListRequest"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       asp-route-currentFilter="@ViewData["CurrentFilter"]"
       class="btn btn-outline-info @nextDisabled">
        Następna strona
    </a>
}
else
{
    <h3>Brak dostępnych wniosków</h3>
}


